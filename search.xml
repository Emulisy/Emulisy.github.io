<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML Fundamentals (1)</title>
      <link href="/2025/08/08/HTML%20Fundamentals%20(1)/"/>
      <url>/2025/08/08/HTML%20Fundamentals%20(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-Hypertext-Markup-Language-the-Fundamentals-1"><a href="#HTML-Hypertext-Markup-Language-the-Fundamentals-1" class="headerlink" title="HTML Hypertext Markup Language - the Fundamentals (1)"></a>HTML Hypertext Markup Language - the Fundamentals (1)</h1><h2 id="Anatomy-of-HTML"><a href="#Anatomy-of-HTML" class="headerlink" title="Anatomy of HTML"></a><a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/Basic_HTML_syntax#anatomy_of_an_html_document">Anatomy of HTML</a></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Metadata: character encoding, title, description --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Brief description of the page&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Title shown in the browser tab --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Web Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Link external CSS stylesheet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Optional internal CSS --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Visible content of the page --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to My Website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Navigation links --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Main content area --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About This Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a sample paragraph in the main section.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Footer content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;copy;</span> 2025 My Website<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Link external JavaScript file (best practice: before closing &lt;/body&gt;) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Optional inline JavaScript --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Page loaded&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>&lt;!DOCTYPE html&gt;</code>: Doctype to be declared as HTML</li><li><code>&lt;html lang=&quot;&quot;&gt;</code>: Root element that wraps up the whole HTML page, for internationalize purpose we usually specify the lang(en, zh, fr, ja, ar, es).</li><li><code>&lt;head&gt;</code>: Contains everything else you want to include in the html file, including metadata, title, or internal or external CSS links. <strong>It does not include any components shown in the user interface!</strong><ul><li><code>&lt;meta&gt;</code>: Contains metadata like character encoding(usually UTF-8), viewport settings and SEO data.</li><li><code>&lt;title&gt;</code>: Browser tab and search engine results.</li><li><code>&lt;link&gt;</code>: External CSS sheet or browser tab icons.</li><li><code>&lt;style&gt;</code>:inline CSS </li><li><code>&lt;script&gt;</code>: Reference to javascript. Using this directly at head will block html from rendering, therefore we only use it with defer(runs after dom ready) or async(parallel with html render) attribute for better performance.</li></ul></li><li><code>&lt;body&gt;</code>: Contains everything that displays on the page. Usually includes<code>&lt;nav&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;section&gt;</code>.</li><li><code>&lt;script&gt;</code>: External or inline JS, ideally put at bottom.</li></ol><hr><h2 id="White-space-rule"><a href="#White-space-rule" class="headerlink" title="White space rule"></a>White space rule</h2><p>In HTML element content, no matter how much white spaces we include, the HTML parser will only recognize the sequence of white spaces as a single space. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>White space rule<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>White</span><br><span class="line">    space</span><br><span class="line">    rule<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--These two paragraphs are rendered the same in your browser!--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>Tip: Accessing the innerHTML of elements from JavaScript will keep all the whitespace intact. This may return unexpected results if the whitespace is trimmed by the browser.</em></p></blockquote><hr><h2 id="Character-references"><a href="#Character-references" class="headerlink" title="Character references"></a>Character references</h2><p>As in almost all programming languages, certain characters have special meanings and are usually treated as part of syntax instead of plain text. Like in python, when we want to print out <code>&quot;&quot;</code>, we need to type <code>print(\&quot;\&quot;)</code>.</p><p>HTML also has reserved characters that are part of the markup, not normal text. If you want these characters to show up in the browser instead of being interpreted, you must use HTML character references:</p><table><thead><tr><th>Literal char</th><th>Char ref</th></tr></thead><tbody><tr><td>&gt;</td><td><code>&amp;gt; </code></td></tr><tr><td>&lt;</td><td><code>&amp;lt;  </code></td></tr><tr><td>“</td><td><code>&amp;quot;</code></td></tr><tr><td>‘</td><td><code>&amp;apos;</code></td></tr><tr><td>&amp;</td><td><code>&amp;amp; </code></td></tr></tbody></table><hr><h2 id="HTML-Comments"><a href="#HTML-Comments" class="headerlink" title="HTML Comments"></a>HTML Comments</h2><p>Like in all languages, we can use ctrl + &#x2F; to conveniently comment lines of codes in HTML.</p><p>In HTML the comment usually start with <code>&lt;--!</code> and ends with <code>--&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--This is a line of comment.--&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="The-Head-of-HTML"><a href="#The-Head-of-HTML" class="headerlink" title="The Head of HTML"></a>The Head of HTML</h2><h3 id="Metadata-and"><a href="#Metadata-and" class="headerlink" title="Metadata and &lt;meta&gt;"></a>Metadata and <code>&lt;meta&gt;</code></h3><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Metadata">Metadata</a>: don’t get confused by its fancy name, this is basically the same as data, however here we regard the HTML file to be the data that the metadata is describing(like the author, the date, the encoding standard).</p><p><strong>Adding Metadata</strong>:</p><ul><li>Adding character encoding:<blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>utf-8</code> is a universal character set that includes pretty much any character from any human language. We usually add this for better performance and internationalization. </p></blockquote></li><li>Adding more metadata:<blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Ian Zhang&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML fundamentals&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>name&#x3D;”?”</th><th>Data contained</th><th>Still used for SEO purpose?</th></tr></thead><tbody><tr><td>author</td><td>The author</td><td>Optional, not used for ranking</td></tr><tr><td>description</td><td>The description of the site</td><td>used for SEO snippet</td></tr><tr><td>keywords</td><td>Keyword of the site</td><td>Usually ignored by search engines</td></tr><tr><td>generator</td><td>specifies the what software or platform was used to create the page</td><td>usually removed for security reasons</td></tr><tr><td>revisit-after</td><td>tells the search engine to crawl the page again after certain period of time</td><td>usually ignored by search engine</td></tr><tr><td>These tags are usually used for SEO purposes only and <strong>does not affect the file and its output directly.</strong></td><td></td><td></td></tr></tbody></table></blockquote></li></ul><h4 id="Important-Meta-Tags"><a href="#Important-Meta-Tags" class="headerlink" title="Important Meta Tags"></a>Important Meta Tags</h4><ul><li><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Guides/Viewport_meta_element">Viewport</a></strong>: This tag tells the browser <strong>how wide the page should be, relative to the screen</strong>, and <strong>how zooming and scaling should work</strong></p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>width&#x3D;</strong> : can be set to specific pixels like <code>width=600</code> (<em>Only accept positive values from 1 to 10000</em>), and can also be set to special value <code>width=device-width</code>.<br>This value establishes the vm unit in CSS.</li><li><strong>height&#x3D;</strong> : same as width but controls only the vertical axis, the special value is <code>height=device-height</code>.<br>This value establishes the vh unit in CSS.</li><li><strong>initial-scale&#x3D;</strong> : controls the zoom level when the page is first loaded. Ranging from 1 to 10 and the default is 1.</li><li><strong>minimum-scale&#x3D; &#x2F; maximum-scale&#x3D;</strong> : the minimum&#x2F;maximum zoom level allowed, by default are 0.1 and 10.</li><li><strong>user-scalable&#x3D;</strong> : controls whether zooming is allowed on the page. Accepted values are <code>0</code>, <code>1</code>, <code>no</code>, <code>yes</code>.</li><li><strong>interactive-widget&#x3D;</strong> : Specifies the effect that interactive UI widgets, such as a virtual keyboard, have on the page’s viewports.<br>Valid values: <code>resizes-visual</code>, <code>resizes-content</code>, or <code>overlays-content</code>. Default: <code>resizes-visual</code>.</li></ul></blockquote></li><li><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/meta/name/robots">Robot</a></strong>: Defines the crawl and indexing behavior that web crawlers should use with the page.</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noindex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>content&#x3D;</strong>: </p><ul><li><code>index</code>: default behaviour, allow robot to index the page.</li><li><code>noindex</code>: restrict robot from indexing the page.</li><li><code>follow</code>: also default behaviour, allow robot to follow links on the page.</li><li><code>nofollow</code>: opposite of <code>follow</code>.</li><li><code>all</code>: equivalent to <code>index</code> + <code>follow</code>, used by google.</li><li><code>none</code>: equivalent to <code>noindex</code> + <code>nofollow</code>, used by google.</li></ul><p><strong>This only affect cooperative robots but not malicious users. In addition, the robot still have to access the page to read the meta tag, so we can consider using a robot.txt file to reduce bandwidth.</strong></p></blockquote></li></ul><hr><h3 id="tag"><a href="#tag" class="headerlink" title="&lt;link&gt; tag"></a><code>&lt;link&gt;</code> tag</h3><ul><li>Using <code>&lt;link&gt;</code> tag we can add custom icons for the site.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Linking style sheets.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>These two are the most common use of <code>&lt;link&gt;</code> tag, however the tag is also used for preload of resource and many other ways.</p><hr><h3 id="Applying-JS-using-tag"><a href="#Applying-JS-using-tag" class="headerlink" title="Applying JS using &lt;script&gt; tag"></a>Applying JS using <code>&lt;script&gt;</code> tag</h3><p>In the <code>&lt;head&gt;</code>, we usually use <code>&lt;script&gt;</code> tag to apply external js script.</p><p>The <code>&lt;script&gt;</code> tag usually have two attributes:</p><ul><li><code>src=</code>: contains the path to the script</li><li><code>defer</code>: a boolean attribute that ensures the HTML are parsed before loading the script</li></ul><p>There are some strategies for introducing a js script to our file only after the HTML elements are parsed:</p><ul><li>Placing the  <code>&lt;script&gt;</code> at the bottom of the <code>&lt;body&gt;</code> instead of the <code>&lt;head&gt;</code>, however depending on the internet connection and the length of the HTML file, this may cause some latency before the script is applied.</li><li>Use <code>&lt;script type=&quot;module&quot;&gt;</code>, so that the browser treats it as a module and will be executed after all HTML are parsed.</li><li>We can also use <code>defer</code> and <code>async</code> attribute for external scripts in <code>head</code>, or wrap the script in eventlistener, but <strong>unless we want to support very old browsers, using <code>type=&quot;module&quot;</code> is sufficient.</strong></li></ul><hr><h2 id="The-body-of-HTML"><a href="#The-body-of-HTML" class="headerlink" title="The body of HTML"></a>The <code>body</code> of HTML</h2><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p>In HTML5, we use <code>&lt;em&gt;</code> to replace <code>&lt;i&gt;</code>, and <code>&lt;strong&gt;</code> to replace <code>&lt;b&gt;</code>, as we want to highlight the semantic meaning of the italic or bold text.</p><blockquote><p>Here’s the best rule you can remember: It’s only appropriate to use <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, or <code>&lt;u&gt;</code> to convey a meaning traditionally conveyed with bold, italics, or underline when there isn’t a more suitable element; and there usually is. Consider whether <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;mark&gt;</code>, or <code>&lt;span&gt;</code> might be more appropriate.</p></blockquote><p><mark> Use the elements based on their semantics, not their appearence!</mark></p><hr><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="Ordered-and-unordered-list"><a href="#Ordered-and-unordered-list" class="headerlink" title="Ordered and unordered list"></a>Ordered and unordered list</h4><ul><li>ordered list <code>&lt;ol&gt;</code></li><li>unordered list <code>&lt;ul&gt;</code></li></ul><p>We always use <code>&lt;li&gt;</code> for list items:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span> This is an unordered list<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span> This is an unordered list<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>This is an ordered list<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>This is an ordered list<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul>  <li> This is an unordered list</li>  <li> This is an unordered list</li></ul></blockquote><blockquote><ol>   <li>This is an ordered list</li>  <li> This is an ordered list</li></ol></blockquote><h4 id="Nested-list"><a href="#Nested-list" class="headerlink" title="Nested list"></a>Nested list</h4><p>To use nested list, we simply add new <code>&lt;ul&gt;</code> <code>&lt;ol&gt;</code> in the list item:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>The first layer<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span> The second layer</span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span>The second layer item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    </span><br></pre></td></tr></table></figure><blockquote><ul>  <li>The first layer</li>  <li> The second layer     <ol>        <li>The second layer item</li>     </ol>  </li></ul>   </blockquote><h4 id="Description-list"><a href="#Description-list" class="headerlink" title="Description list"></a>Description list</h4><p>The purpose of description lists is to mark up a set of items and their associated descriptions, such as terms and definitions.</p><p>Description lists use a different wrapper than the other list types — <code>&lt;dl&gt;</code>; in addition each term is wrapped in a <code>&lt;dt&gt;</code> (description term) element, and each description is wrapped in a <code>&lt;dd&gt;</code> (description definition) element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>The HTML<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A language that serves as the main skeleton of a website<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>The CSS<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Defines the styling of HTML skeleton<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><dl>  <dt>The HTML</dt>  <dd>A language that serves as the main skeleton of a website</dd>  <dt>The CSS</dt>  <dd>Defines the styling of HTML skeleton</dd></dl><p>To put it plainly, <code>&lt;dt&gt;</code> is like the item of the first layer list, and <code>&lt;dd&gt;</code> is like the item of the second layer list, and <code>&lt;dl&gt;</code> is like the <code>&lt;ol&gt;</code> that wraps everything up.<br>Tip: there can be multiple description for one term, just like there can be multiple items in a nested list.</p></blockquote><hr>]]></content>
      
      
      
        <tags>
            
            <tag> English - 编程 - frontend - 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS571 Class note 1</title>
      <link href="/2025/08/04/CS571%20Class%20note%201/"/>
      <url>/2025/08/04/CS571%20Class%20note%201/</url>
      
        <content type="html"><![CDATA[<h1 id="CS571-UW-Madison"><a href="#CS571-UW-Madison" class="headerlink" title="CS571 @UW-Madison"></a>CS571 @UW-Madison</h1><p>CS571 is a course for basic UI&#x2F;UX design and frontend programming by University of Wisconsin Madison. The course is completely open source for all cs students to learn globally.</p><blockquote><p>The official website of this course is <a href="https://cs571.org/">CS571</a>, the latest version is for 2025 Spring. </p><p>You can find matching class videos and other materials in this website.</p></blockquote><hr><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>Json(<em>Javascript Object Notation</em>) is basically a way to represent data in a hierarchy key-value pairs.</p><p>The first tutorial didn’t cover json in depth, I assume they will look in to json in the next few tutorials.</p><hr><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><blockquote><p>A good place to learn HTML is <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">MDN Web Doc</a>, this site covers all useful HTML components in detail.</p><p>This note will not cover html in basics, but will contain insights and interesting discoveries I found while learning.</p></blockquote><hr><h3 id="Semantics-and-nesting-elements"><a href="#Semantics-and-nesting-elements" class="headerlink" title="Semantics and nesting elements"></a>Semantics and nesting elements</h3><p>Sometimes we can place elements within other elements, this is called nesting, just like in programming we have nested loops. </p><blockquote><p>this is <strong>me</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>this is <span class="tag">&lt;<span class="name">strong</span>&gt;</span>me<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Using <code>&lt;strong&gt;</code> label we can emphasize the text in bold font.</p></blockquote><p>However, if you learned html before, you may be confused that <code>&lt;b&gt;</code> label also turns the text into bold font. The main difference is the semantics.</p><p>In HTML, although pairs like <code>&lt;strong&gt;</code> and <code>&lt;b&gt;</code> have the same visual effect, they are not treated the same in screen readers or search engines.</p><blockquote><ul><li>the search engine may give more weight to <code>&lt;strong&gt;</code> but would treat <code>&lt;b&gt;</code> texts as normal texts.</li><li>the screen reader may read <code>&lt;strong&gt;</code> text with emphasis to help visually impaired users.</li></ul></blockquote><p>Same applies to label pairs like:</p><ul><li><code>&lt;em&gt;</code> vs <code>&lt;i&gt;</code></li><li><code>&lt;mark&gt;</code> vs <code>&lt;span style=&quot;background: yellow&quot;&gt;</code></li><li><code>&lt;code&gt;</code> vs <code>&lt;span style=&quot;font-family: monospace&quot;&gt;</code></li><li><code>&lt;blockquote&gt;</code> vs <code>&lt;div style=&quot;margin-left: 20px&quot;&gt;</code></li><li><code>&lt;abbr&gt;</code> vs just typing the abbreviation</li></ul><p>These label pairs have the exact same visual representation but different semantics meaning, and will therefore be treated differently in browsers or assistive technologies. </p><hr><h3 id="Void-Elements"><a href="#Void-Elements" class="headerlink" title="Void Elements"></a>Void Elements</h3><p>Some elements don’t have closed tag and are composed of only one tag:</p><ul><li><code>&lt;img&gt;</code></li><li><code>&lt;br&gt;</code></li><li><code>&lt;hr&gt;</code></li><li><code>&lt;input&gt;</code></li><li><code>&lt;link&gt;</code></li><li><code>&lt;href&gt;</code></li><li><code>&lt;meta&gt;</code></li></ul><hr><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><p>Typically, an attribute looks like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">attr</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can add identifiers using attribute, define the labels behaviour, or apply inline css styles:</p><ul><li>class or id identifiers <code>id=&quot;&quot;</code>, <code>class=&quot;&quot;</code></li><li>define behaviour  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--    this defines that the input is text--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    you can also set the &quot;type&quot; attribute to &quot;password&quot;, &quot;email&quot;, etc.--&gt;</span></span><br></pre></td></tr></table></figure></li><li>inline css <code>style=&quot;&quot;</code></li></ul><hr><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="CSS-Units"><a href="#CSS-Units" class="headerlink" title="CSS Units"></a>CSS Units</h3><p>It has always puzzled me how the units of measurement works in CSS, commonly seen units like px, %, vh, may have the same visual effect in a fixed window, but completely different size in another.</p><p>While learning CSS in CS571, I took some time to figure out the exact mechanism for such transformation.</p><blockquote><p>Ref <a href="https://www.geeksforgeeks.org/css/css-units-em-rem-px-vh-vw/">geek4geek</a></p></blockquote><p>In general there are absolute units (that remain the same scale regardless of the window), and relative units. In order to make the page adaptable and scalable for new windows, we usually prefer the latter.</p><table>  <tr>    <td rowspan="6"><strong>Absolute Units</strong></td>    <td><code>px</code></td><td>Pixels — relative to screen (1px = 1 dot)</td>  </tr>  <tr>    <td><code>pt</code></td><td>Points — 1pt = 1/72 inch = 0.3527cm</td>  </tr>  <tr>    <td><code>in</code></td><td>Inches — 1in = 2.54cm = 96px</td>  </tr>  <tr>    <td><code>cm</code></td><td>Centimeters — 1cm ≈ 37.8px</td>  </tr>  <tr>    <td><code>mm</code></td><td>Millimeters — 10mm = 1cm</td>  </tr>  <tr>    <td><code>pc</code></td><td>Picas — 1pc = 12pt = 4.233mm</td>  </tr>  <tr>    <td rowspan="6"><strong>Relative Units</strong></td>    <td><code>%</code></td><td>Percentage — relative to parent element</td>  </tr>  <tr>    <td><code>em</code></td><td>Relative to the font size of the element</td>  </tr>  <tr>    <td><code>rem</code></td><td>Relative to the root element's font size</td>  </tr>  <tr>    <td><code>vw</code></td><td>1% of viewport width</td>  </tr>  <tr>    <td><code>vh</code></td><td>1% of viewport height</td>  </tr>  <tr>    <td><code>vmin</code></td><td>1% of the smaller of viewport width or height</td>  </tr></table>]]></content>
      
      
      <categories>
          
          <category> CS571 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> 编程 </tag>
            
            <tag> frontend </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data 8 学习笔记(四)</title>
      <link href="/2025/07/03/Data8%20%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0(%E5%9B%9B)/"/>
      <url>/2025/07/03/Data8%20%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="Data-8-学习笔记-四"><a href="#Data-8-学习笔记-四" class="headerlink" title="Data 8 学习笔记(四)"></a>Data 8 学习笔记(四)</h1><blockquote><p><em>数据科学简直就是统计学披着计算机的外皮。</em><br><i style="text-align: right; display: block;">——我</i></p></blockquote><h2 id="Testing-Hypothesis-假设检验"><a href="#Testing-Hypothesis-假设检验" class="headerlink" title="Testing Hypothesis 假设检验"></a>Testing Hypothesis 假设检验</h2><p>这里我们以孟德尔的豌豆花形状实验为例，孟德尔的模型是，对于每一株豌豆有75%其有紫色花，25%其为白花，其颜色和其他植株独立。</p><h3 id="Step-1-The-Hypothesis-假设"><a href="#Step-1-The-Hypothesis-假设" class="headerlink" title="Step 1: The Hypothesis 假设"></a>Step 1: The Hypothesis 假设</h3><blockquote><p><strong>The Null hypothesis 零(原)假设</strong>：零假设认为所有数据都是在明确指定的条件下生成的，如果数据结果和零假设不同，那只可能是因为偶然性。</p><p>但是我们最关心的是，在实际应用中，零假设是我们研究者提出的，用来模拟数据的假设。</p><p>对于孟德尔模型来说，零假设就是其模型是正确的，即每株豌豆有75%是紫色花，25%是白色花，且互相独立。</p></blockquote><blockquote><p><strong>The Alternative Hypothesis 备选假设</strong>：备选假设站在零假设的对立面，它说明除了概率以外的其他因素导致了结果和零假设相悖。</p><p>对于孟德尔模型来说，备选假设很简单，就是孟德尔模型不正确。这里我们并不说明理由和影响因素。</p></blockquote><hr><h3 id="Step-2-The-Test-Statistic-检验统计量"><a href="#Step-2-The-Test-Statistic-检验统计量" class="headerlink" title="Step 2: The Test Statistic 检验统计量"></a>Step 2: The Test Statistic 检验统计量</h3><p>为了在这两个假设之间作出决策，我们必须选择一个统计量作为我们决策的依据。 这被称为检验统计量 <code>Test Statistic</code>。</p><blockquote><p><strong>TVD(Total Variation Distance) 总变差距离</strong>：量化两个概率分布的距离</p><p><span style="text-align: center; display: block;">$TVD(P, Q) &#x3D; \frac{1}{2} \sum_x|P(x) - Q(x)|$</p><p>即两个概率分布的TVD是每个事件概率差的绝对值的和除以二</p><p>TVD的值在0到1之间：</p><ul><li>TVD &#x3D; 0 表示两个分布完全相同</li><li>TVD &#x3D; 1 表示两个分布完全不重叠</li></ul></blockquote><p>以孟德尔的实验结果为例，929株豌豆中有705株有紫色花，我们选择计算随机抽样结果和模型的相关性，于是我们计算这两个分布的TVD。为了更好的观察数据我们把结果转换成百分比。</p><blockquote><p><strong>Observed Value of the Test Statistic 检测统计量的观测值</strong>：这里随机抽样得到的705&#x2F;929是检测统计量的观测值，该数据并非我们通过模拟得到的。</p></blockquote><p><code>TVD = 0.5 * (abs(100 * 705/929 - 75) + abs(100 * 224/929 - 25))</code> TVD 的结果是 <code>0.8880516684607045</code>。</p><hr><h3 id="Step-3：The-Distribution-of-the-Test-Statistic-Under-the-Null-Hypothesis-在原假设下检测统计量的概率分布"><a href="#Step-3：The-Distribution-of-the-Test-Statistic-Under-the-Null-Hypothesis-在原假设下检测统计量的概率分布" class="headerlink" title="Step 3：The Distribution of the Test Statistic, Under the Null Hypothesis 在原假设下检测统计量的概率分布"></a>Step 3：The Distribution of the Test Statistic, Under the Null Hypothesis 在原假设下检测统计量的概率分布</h3><p>为了搞清楚原假设的模型预测的数据是什么样的，我们需要知道如果原假设是正确的，我们应该得到的检验统计量应该是怎样的。 于是我们需要把原假设为正确作为前提来模拟，通过抽样过程的大量重复和统计量的经验分布来近似检验统计量的概率分布。。</p><blockquote><ul><li>对于每个植株，紫花的概率是0.75</li><li>样本大小是929</li><li>每次模拟我们生成929次，记录其中紫花的比例还有其与原假设(75%)的距离， 也就是|紫花的百分比 - 75|</li><li>重复模拟</li></ul><p>结果可视化后如图<br><img src="/../img/data8/data8-4.png" alt="result"><br>我们可以发现，大部分的数据在0到1的区间内，也就是模拟数据和理想状况(75%)的距离大多数在0到1之间。</p></blockquote><p>接下来我们要比较我们根据原假设的预测和莫德尔的实际观察数据。</p><hr><h3 id="Step-4-The-Conclusion-of-the-Test-下结论"><a href="#Step-4-The-Conclusion-of-the-Test-下结论" class="headerlink" title="Step 4. The Conclusion of the Test 下结论"></a>Step 4. The Conclusion of the Test 下结论</h3><p>原假设和备选假设之间的选择，取决于Step 2 和 3 的结果之间的比较：检验统计量的观察值以及由原假设预测的概率分布。</p><p>如果二者一致<code>consistent</code>，则观察到的检验统计量与原假设的预测一致。 换句话说，这个检验并不偏向备选假设；数据更加支持原假设。</p><p>但如果两者不一致，就像我们阿拉米达县陪审团的例子那样，那么数据就不支持原假设。 这就是为什么我们得出结论，陪审团不是随机挑选的。 几率之外的东西影响了他们的构成。</p><p>如果数据不支持原假设，我们说检验拒绝<code>reject</code>了原假设。</p><p>我们从Step 2得知，孟德尔的数据检测统计量的观测值是大约0.89，这和我们在Step 3里面的结果相吻合，也就是说孟德尔的模型，也就是原假设相比于备选假设更正确。</p><hr><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>判断检测统计量和预测是否一致的指标目前很不明确，所以我们需要用更系统的方式去决定什么时候我们认为两者<code>consistent</code>一致。</p><h3 id="Significance-and-p-value-显著性和p值"><a href="#Significance-and-p-value-显著性和p值" class="headerlink" title="Significance and p-value 显著性和p值"></a>Significance and p-value 显著性和p值</h3><p>孟德尔的数据的和原假设预测的TVD是0.89，但是如果我们的数据和原假设的TVD是3.2呢？我们怎么判断原假设和备选假设哪个更正确呢？</p><blockquote><p><img src="/../img/data8/data8-4-2.png" alt="result"><br>我们可以看见，3.2的TVD位于红点所在的位置。 惯例上，我们习惯于通过尾部tail来判断，也就是从红点向偏向于备选假设的方向，在这里是右方。如果tail的面积(在直方图里面积就是比例)过小，我们就可以说观察到的数据和符合原假设的预测相去甚远。</p><p>通过计算，我们可以得到有2.4%的在原假设下的模拟数据的TVD大于3.2，这个概率很小了，如果原假设是正确的话我们的数据应该有97.6%概率比3.2小。这时我们就需要引入convention惯例了。</p></blockquote><h4 id="p-value-p值"><a href="#p-value-p值" class="headerlink" title="p-value p值"></a>p-value p值</h4><p><strong>显著性 (Significance)</strong> 用来评估观察到的测试统计量有多不寻常，即在原假设成立的情况下，这个统计量出现的概率有多低，这个值我们称为<strong>p-value p值</strong>，也就是我们上面所计算的2.4%。</p><blockquote><p>Definition: The p-value of a test is the chance, based on the model in the null hypothesis, that the test statistic will be equal to the observed value in the sample or even further in the direction that supports the alternative.</p></blockquote><h4 id="Significance-level"><a href="#Significance-level" class="headerlink" title="Significance level"></a>Significance level</h4><p>在实际运用中我们会设置一个阙值<code>cutoffs</code>(显著性水平) $\alpha$： <code>conventional cutoffs</code>一般来说，我们认为5%是一个方便的极限，也就是</p><ul><li>$p &lt;&#x3D; \alpha$的时候结果统计显著，即有足够证据拒绝原假设。</li><li>$p &gt; \alpha$，则无法拒绝原假设。</li></ul><blockquote><p>统计学上显著性水平 $\alpha$ 是<b>第一类错误(Type I error)</b>的容忍度： </p><p>第一类错误：错误地拒绝了原本真实的原假设。 比如 $\alpha &#x3D; 0.05$，就代表即便原假设是真的，仍有 5% 的可能性我们会误判为拒绝。</p><p>第二类错误：备择假设 (Alternative Hypothesis) 为真，但错误地没有拒绝原假设。 Data8暂时不覆盖计算Type Ⅱ error的概率计算。</p></blockquote><hr><h3 id="Data-Snooping-and-p-Hacking-数据窥探"><a href="#Data-Snooping-and-p-Hacking-数据窥探" class="headerlink" title="Data Snooping and p-Hacking 数据窥探"></a>Data Snooping and p-Hacking 数据窥探</h3><p>咱们在高中物理化学生物实验就做过类似的事情了~在分析前或假设检验之前，反复探索数据、试图找到看似显著的关系，或者为了使p值小于等于0.05改变分析方法强行得到结果。</p><p>Needless to say, 这样会导致很多问题</p><ul><li>结果可复现性极低</li><li>增加假阳性 false positive</li><li>结果不具有统计效度</li></ul><p>为了academic integrity 我们一定要事前定义好假设和方法，不去反复调整，统计显著性才可信，否则结果的p&lt;&#x3D;0.05可能只是数据随机波动的幻觉。</p><hr><h2 id="Project-2-Part-1"><a href="#Project-2-Part-1" class="headerlink" title="Project 2 Part 1"></a>Project 2 Part 1</h2><p>project1很基础很简单，但是project 2 开始涉及一些系统的统计学术语了，有些在textbook里没进行阐述。Part 2 的内容包括教科书第12章的内容，下一个笔记会涵盖。</p><hr><h3 id="置信区间及其计算"><a href="#置信区间及其计算" class="headerlink" title="置信区间及其计算"></a>置信区间及其计算</h3><p>置信区间 Confidence Interval CI: 置信区间是指由样本统计量所构造的总体参数的估计区间</p><p>置信区间是基于样本数据，对总体参数（例如总体均值）的一种区间估计。<br>常用的置信水平（Confidence Level）有 95%、99% 等。<br>例如，95% 置信区间意味着：</p><p>如果重复抽样并计算置信区间，多次后约95%的区间会包含真实总体参数。</p><blockquote><p>线性插值： 如果百分位数对应的位置是浮点数，取它相邻的两个点，按距离比例计算加权平均。</p><p>也就是对于第2和第3个数据加权平均0.5。但是np使用<code>np.percentile()</code>就自动进行插值了，很方便<br>本节我们只学习bootstrap方法取置信区间，具体代码实现如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bootstrap_ci</span>(<span class="params">data, statistic_func, num_samples=<span class="number">5000</span>, ci=<span class="number">95</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算给定数据和统计量的 Bootstrap 置信区间</span></span><br><span class="line"><span class="string">    data: 原始样本数据 (np array)</span></span><br><span class="line"><span class="string">    statistic_func: 统计量函数 (如 np.mean, np.median)</span></span><br><span class="line"><span class="string">    num_samples: 重采样次数</span></span><br><span class="line"><span class="string">    ci: 置信水平 (百分数)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    boot_stats = make_array()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_samples):</span><br><span class="line">        resample = np.random.choice(data, size=<span class="built_in">len</span>(data), replace=<span class="literal">True</span>)</span><br><span class="line">        stat = statistic_func(resample)</span><br><span class="line">        boot_stats = np.append(boot_stats, stat)</span><br><span class="line">    </span><br><span class="line">    lower = np.percentile(boot_stats, (<span class="number">100</span> - ci) / <span class="number">2</span>)</span><br><span class="line">    upper = np.percentile(boot_stats, <span class="number">100</span> - (<span class="number">100</span> - ci) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> lower, upper</span><br></pre></td></tr></table></figure><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://inferentialthinking.com/chapters/intro.html#">Data 8 Text book: Inferential Thinking chapter 11</a></p>]]></content>
      
      
      <categories>
          
          <category> Data8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 中文 </tag>
            
            <tag> Data science(数据科学) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data8 课堂笔记(三)</title>
      <link href="/2025/07/01/Data8%20%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0(%E4%B8%89)/"/>
      <url>/2025/07/01/Data8%20%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="Data-8-学习笔记-三"><a href="#Data-8-学习笔记-三" class="headerlink" title="Data 8 学习笔记(三)"></a>Data 8 学习笔记(三)</h1><h2 id="Numpy-random-choice"><a href="#Numpy-random-choice" class="headerlink" title="Numpy random.choice()"></a>Numpy random.choice()</h2><p>有时我们需要从集合里随机选取一个值，这时就可以用np.choice()，具体语法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#随机选取一个值</span></span><br><span class="line">random_choice = np.choice(array_name)</span><br><span class="line"><span class="comment">#多次随机选取</span></span><br><span class="line">random_choices = np.choice(array_name, frequency)</span><br><span class="line"><span class="comment">#模拟掷骰子三次</span></span><br><span class="line">dice_rolls = np.choice(np.arange(<span class="number">1</span>,<span class="number">7</span>), <span class="number">3</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="模拟-simulation-以原神抽卡为例"><a href="#模拟-simulation-以原神抽卡为例" class="headerlink" title="模拟 simulation - 以原神抽卡为例"></a>模拟 simulation - 以原神抽卡为例</h2><h3 id="Step-1-What-to-simulate"><a href="#Step-1-What-to-simulate" class="headerlink" title="Step 1: What to simulate?"></a>Step 1: What to simulate?</h3><p>我们想要模拟每次抽到五星物品的预计抽数。<br>每一次抽卡只会有两个结果：</p><ul><li>抽到五星物品</li><li>没抽到五星物品</li></ul><hr><h3 id="Step-2-Simulating-one-play"><a href="#Step-2-Simulating-one-play" class="headerlink" title="Step 2: Simulating one play."></a>Step 2: Simulating one play.</h3><p>接下来我们模拟一次抽卡的结果。目前我们只考虑五星，不考虑四星插队的情况，也不考虑up角色的情况：</p><p>在前73抽，每次出现五星物品的概率为0.6%。 从第74抽开始，每次增加6%的概率直至第90抽到达100%。</p><p>我们定义一个函数<code>calc_chance</code>来计算每一抽出五星的概率，传入参数pity为目前抽数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_chance</span>(<span class="params">pity</span>):</span><br><span class="line">    <span class="keyword">if</span> pity &lt; <span class="number">74</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.006</span></span><br><span class="line">    <span class="keyword">elif</span> pity &lt; <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.006</span> + <span class="number">0.06</span> * (pity - <span class="number">74</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>那么对于一次模拟，我们定义函数<code>one_simulation</code>获得出五星时的抽数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">one_simulation</span>():</span><br><span class="line">    pity = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        pity += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> np.random.random() &lt; calc_chance(pity):</span><br><span class="line">            <span class="keyword">return</span> pity</span><br></pre></td></tr></table></figure><hr><h3 id="Step-3-Number-of-repetition"><a href="#Step-3-Number-of-repetition" class="headerlink" title="Step 3: Number of repetition"></a>Step 3: Number of repetition</h3><p>模拟次数由我们决定，次数越多结果越可靠，但是耗时越长。 这里我们仅仅模拟10000次试试：</p><ul><li>也就是说我们要模拟抽到五星物品的抽卡数10000次</li></ul><hr><h3 id="Step-4-Simulating-Multiple-Values"><a href="#Step-4-Simulating-Multiple-Values" class="headerlink" title="Step 4: Simulating Multiple Values"></a>Step 4: Simulating Multiple Values</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num_of_repetition = <span class="number">10000</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_of_repetition):</span><br><span class="line">    res.append(one_simulation())</span><br><span class="line">res = np.array(res)</span><br><span class="line">simulation_result = Table().with_columns(</span><br><span class="line">    <span class="string">&quot;Repetition&quot;</span>, np.arange(<span class="number">1</span>, num_of_repetition + <span class="number">1</span>),</span><br><span class="line">    <span class="string">&quot;Count&quot;</span>, res</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>在<code>simulation_result</code>里我们获得了10000次模拟组成的Table。 接下来我们可以用直方图直观的查看数据分布, 并用np.mean查看出五星的平均抽数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simulation_result.hist(<span class="string">&quot;Count&quot;</span>, bins=np.arange(<span class="number">1</span>, <span class="number">91</span>, <span class="number">1</span>))</span><br><span class="line">np.mean(res) <span class="comment">#在jupiter notebook里会自动打印每个cell的最后一行代码</span></span><br></pre></td></tr></table></figure><p>结果如图：<br><img src="/../img/data8/data8-3.png" alt="result"><br><strong>所以说我们可以得出结论，原神出金的平均抽数为大约63抽，但是大部分人会在74抽以后出金。</strong><br>当然我们也可以用<code>np.median()</code>获得中位数数据。</p><hr><h2 id="Monty-Hall-Problem-三门问题"><a href="#Monty-Hall-Problem-三门问题" class="headerlink" title="Monty Hall Problem 三门问题"></a>Monty Hall Problem 三门问题</h2><p>经典的统计学问题，国内高中数学应该早有接触的。我们也可以用模拟来得出大概结论。具体情景可以参考<a href="https://zhuanlan.zhihu.com/p/48254298">三门问题</a>。有三道门，背后分别由一辆汽车两个山羊，参与者从中选择一道门，然后主持人从剩余的两道门里指出背后有山羊的一道门，并询问参与者是否选择更换自己的选择。</p><p>有一种反直觉但是符合逻辑的方式理解这个问题：</p><ul><li>从三道门里任选一个门背后有汽车的概率是1&#x2F;3</li><li>那么选择一道门以后，剩余两道门里有汽车的概率为2&#x2F;3</li><li>当得知剩余两道门的一道门背后有山羊后，最后的一道门里有车的概率还是2&#x2F;3</li><li>所以如果选择换门，获得汽车的概率为2&#x2F;3，不换门的话概率仍然是1&#x2F;3</li></ul><p>通过我们提到的模拟，我们也能得出一样的结论，具体可以查看<a href="https://inferentialthinking.com/chapters/09/4/Monty_Hall_Problem.html">data8教科书第9章第4节</a>。</p><hr><h2 id="Discrete-Distribution-离散分布"><a href="#Discrete-Distribution-离散分布" class="headerlink" title="Discrete Distribution 离散分布"></a>Discrete Distribution 离散分布</h2><p>Monash MAT1830离散数学里有提到几种离散分布：</p><h3 id="Bernoulli-Distribution"><a href="#Bernoulli-Distribution" class="headerlink" title="Bernoulli Distribution"></a>Bernoulli Distribution</h3><ul><li><strong>Definition</strong>: A distribution with only two outcomes: success ($1$) or failure ($0$).</li><li><strong>Parameter</strong>:<ul><li>$p$: probability of success</li></ul></li><li><strong>Support</strong>: $x \in {0, 1}$</li><li><strong>PMF (Probability Mass Function)</strong>:<br>$$<br>P(X &#x3D; x) &#x3D; p^x (1 - p)^{1 - x}<br>$$</li><li><strong>Mean</strong>: $\mu &#x3D; p$</li><li><strong>Variance</strong>: $\sigma^2 &#x3D; p(1 - p)$</li></ul><hr><h3 id="Binomial-Distribution"><a href="#Binomial-Distribution" class="headerlink" title="Binomial Distribution"></a>Binomial Distribution</h3><ul><li><strong>Definition</strong>: Number of successes in $n$ independent Bernoulli trials.</li><li><strong>Parameters</strong>:<ul><li>$n$: number of trials</li><li>$p$: probability of success</li></ul></li><li><strong>Support</strong>: $x \in {0, 1, …, n}$</li><li><strong>PMF</strong>:<br>$$<br>P(X &#x3D; x) &#x3D; \binom{n}{x} p^x (1 - p)^{n - x}<br>$$</li><li><strong>Mean</strong>: $\mu &#x3D; np$</li><li><strong>Variance</strong>: $\sigma^2 &#x3D; np(1 - p)$</li></ul><hr><h3 id="Geometric-Distribution"><a href="#Geometric-Distribution" class="headerlink" title="Geometric Distribution"></a>Geometric Distribution</h3><ul><li><strong>Definition</strong>: Number of trials until the first success.</li><li><strong>Parameter</strong>:<ul><li>$p$: probability of success per trial</li></ul></li><li><strong>Support</strong>: $x \in {1, 2, 3, \dots}$</li><li><strong>PMF</strong>:<br>$$<br>P(X &#x3D; x) &#x3D; (1 - p)^{x - 1} p<br>$$</li><li><strong>Mean</strong>: $\mu &#x3D; \frac{1}{p}$</li><li><strong>Variance</strong>: $\sigma^2 &#x3D; \frac{1 - p}{p^2}$</li></ul><hr><h3 id="Poisson-Distribution"><a href="#Poisson-Distribution" class="headerlink" title="Poisson Distribution"></a>Poisson Distribution</h3><ul><li><strong>Definition</strong>: Models the number of events in a fixed interval of time or space.</li><li><strong>Parameter</strong>:<ul><li>$\lambda$: average rate of occurrence</li></ul></li><li><strong>Support</strong>: $x \in {0, 1, 2, \dots}$</li><li><strong>PMF</strong>:<br>$$<br>P(X &#x3D; x) &#x3D; \frac{e^{-\lambda} \lambda^x}{x!}<br>$$</li><li><strong>Mean</strong>: $\mu &#x3D; \lambda$</li><li><strong>Variance</strong>: $\sigma^2 &#x3D; \lambda$</li></ul><hr><h3 id="Discrete-Uniform-Distribution"><a href="#Discrete-Uniform-Distribution" class="headerlink" title="Discrete Uniform Distribution"></a>Discrete Uniform Distribution</h3><ul><li><strong>Definition</strong>: All outcomes are equally likely.</li><li><strong>Parameter</strong>:<ul><li>$a, b$: integers, where $a \leq x \leq b$</li></ul></li><li><strong>Support</strong>: $x \in {a, a+1, \dots, b}$</li><li><strong>PMF</strong>:<br>$$<br>P(X &#x3D; x) &#x3D; \frac{1}{b - a + 1}<br>$$</li><li><strong>Mean</strong>:<br>$$<br>\mu &#x3D; \frac{a + b}{2}<br>$$</li><li><strong>Variance</strong>:<br>$$<br>\sigma^2 &#x3D; \frac{(b - a + 1)^2 - 1}{12}<br>$$</li></ul><hr><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>不需要记公式，只需要知道什么情况下用哪一种分布即可：</p><ul><li><p><strong>伯努利分布</strong>：单次试验，只有两种可能结果（成功&#x2F;失败）<br>例：抛一次硬币</p></li><li><p><strong>二项分布</strong>：重复 $n$ 次独立伯努利试验，统计成功次数<br>例：抛 $n$ 次硬币，看出现正面的次数</p></li><li><p><strong>几何分布</strong>：独立重复试验直到首次成功，记录试验次数<br>例：没有保底的抽卡，出金需要几次(<em>之前做的原神抽卡模拟就是几何分布，但是概率不恒定</em>)</p></li><li><p><strong>泊松分布</strong>：单位时间或空间内，事件发生的次数<br>例：一分钟内收到的电话数量，或连续掷骰子 100 次，6 出现的次数</p></li><li><p><strong>离散均匀分布</strong>：每个可能结果的概率完全相等<br>例：标准六面骰任意一次掷出的点数</p></li></ul><hr><h2 id="抽样-Sampling"><a href="#抽样-Sampling" class="headerlink" title="抽样 Sampling"></a>抽样 Sampling</h2><p>于表格Table而言，抽样的个体就是一行数据<code>row</code></p><hr><h3 id="确定性样本-Deterministic-Samples"><a href="#确定性样本-Deterministic-Samples" class="headerlink" title="确定性样本 Deterministic Samples"></a>确定性样本 Deterministic Samples</h3><p>其实我们之前已经取过确定性样本了，我们使用的<code>Table.take()</code>可以取出给定的行，而<code>Table.where()</code>可以根据一定条件取出所需要的行，这些都是确定性样本，因为它们都不涉及任何概率计算，是基于给定的条件取出的样本。</p><hr><h3 id="概率抽样-Probability-Samples"><a href="#概率抽样-Probability-Samples" class="headerlink" title="概率抽样 Probability Samples"></a>概率抽样 Probability Samples</h3><p>很多时候我们需要从数据集里随机抽取数据以保证数据可靠。</p><ul><li>总体<code>population</code>：抽样的完整数据集</li><li>概率样本<code>Probability Samples</code> ：在抽取该样本前，我们先计算出的元素的任何子集将进入样本的几率，该几率不一定相同，可以有权重影响等。</li></ul><h4 id="随机取样"><a href="#随机取样" class="headerlink" title="随机取样"></a>随机取样</h4><p>其实游戏抽卡就是一种随机取样，每个非空子集都有可以量化的概率，这些概率通常不同，例如</p><ul><li>五星物品 0.60%</li><li>四星 5.10%</li><li>三星 94.30%<br>抽卡的本质是从上述三种可能性中，按照概率进行抽样。也就是说，每次抽卡并不是等概率的选择，而是遵循一个给定的概率分布。</li></ul><hr><h3 id="系统样本-A-Systematic-Sample"><a href="#系统样本-A-Systematic-Sample" class="headerlink" title="系统样本 A Systematic Sample"></a>系统样本 A Systematic Sample</h3><p>假设你有个表格，先从前10行选取随机一行，然后每隔10行选取一次，这样子获得的样本就是系统样本。</p><p>用这种方式选的每一行数据概率都是1&#x2F;10，例如第21行只有在随机选取到第1行的时候才会被选取，概率为1&#x2F;10。 然而该取样方式的子集只有每隔10行的集合(<em>eg. 1,11,21,31</em>)，每个子集有 1&#x2F;10 概率被选中，但是其他子集的概率都为0(<em>eg. 1，2，4，5…</em>)。</p><hr><h3 id="放回或不放回的随机取样-Random-Samples-Drawn-With-or-Without-Replacement"><a href="#放回或不放回的随机取样-Random-Samples-Drawn-With-or-Without-Replacement" class="headerlink" title="放回或不放回的随机取样 Random Samples Drawn With or Without Replacement"></a>放回或不放回的随机取样 Random Samples Drawn With or Without Replacement</h3><p>掷骰子抛硬币都是放回的取样，总体不改变。这也是<code>np.random.choice()</code>的默认行为。</p><p>但是有些时候我们想要不放回的取样，例如发牌。</p><hr><h3 id="方便抽样-Convenience-Samples-我也不知道中文翻译对没"><a href="#方便抽样-Convenience-Samples-我也不知道中文翻译对没" class="headerlink" title="方便抽样 Convenience Samples (我也不知道中文翻译对没)"></a>方便抽样 Convenience Samples <em>(我也不知道中文翻译对没)</em></h3><p>很多时候我们会认为我们进行的是随机抽样，但实际上是Convenience Sample。例如在街上“随机”采访，实际上我们只是选取路过的人采访而已，我们并不知道时间跨度上之后的路人路过的概率，甚至不知道总体包括的人有哪些。</p><hr><h2 id="经验分布-Empirical-Distributions"><a href="#经验分布-Empirical-Distributions" class="headerlink" title="经验分布 Empirical Distributions"></a>经验分布 Empirical Distributions</h2><p>在数据科学里，<code>empirical</code>和<code>observed</code>是同义的，所以说所谓经验分布其实就是被观察到的数据的分布情况</p><hr><h3 id="Table-sample"><a href="#Table-sample" class="headerlink" title="Table.sample()"></a>Table.sample()</h3><p>我们之前介绍过用<code>np.random.choice()</code> 或者<code>np.random.random()</code>来从np array里面获得随机元素，或者随机选取0-1的小数。然而在Table里随机抽样需要我们随机选取行，这时我们就可以使用<code>Table.sample()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Table.sample(num, with_replacement=)</span><br><span class="line"><span class="comment">#第一个参数时抽样的样本数目</span></span><br><span class="line"><span class="comment">#同时我们可以赋值给with_replacement=来决定是否放回抽样</span></span><br></pre></td></tr></table></figure><hr><h3 id="The-law-of-averages-平均定律"><a href="#The-law-of-averages-平均定律" class="headerlink" title="The law of averages 平均定律"></a>The law of averages 平均定律</h3><p>如果偶然的实验在相同的条件下独立重复，那么从长远来看，事件发生的频率越来越接近事件的理论概率。</p><hr><h3 id="样本的经验直方图"><a href="#样本的经验直方图" class="headerlink" title="样本的经验直方图"></a>样本的经验直方图</h3><p>对于大型随机样本，样本的经验直方图和总体的直方图几乎一模一样。</p><p>这证明了，在统计推断中使用大型随机样本是合理的。由于大型随机样本可能类似于从中抽取的总体，从样本中计算出的数量可能接近于总体中相应的数量。</p><hr><h3 id="统计量-Statistic"><a href="#统计量-Statistic" class="headerlink" title="统计量 Statistic"></a>统计量 Statistic</h3><ul><li>参数 Parameter: 与总体相关的数据   eg： 中位数， 平均值……</li><li>统计量 Statistic： 样本中的数据  eg： 样本的中位数，平均值……</li></ul><p>统计量的值会根据样本而改变，并非恒定。</p><p>模拟统计量的步骤：</p><ul><li>生成一个统计量</li><li>重复生成多个统计量</li><li>可视化结果</li></ul><hr><h2 id="用Python进行随机抽样-Random-Sampling-in-Python"><a href="#用Python进行随机抽样-Random-Sampling-in-Python" class="headerlink" title="用Python进行随机抽样 Random Sampling in Python"></a>用Python进行随机抽样 Random Sampling in Python</h2><ul><li><strong>从Table里随机抽样</strong>：<code>Table.sample(num, with_replacement=)</code></li><li><strong>从array里随机抽样</strong>：<code>np.random.choice(array, num, replace=)</code></li><li><strong>从类别分布中取样</strong></li></ul><h3 id="从类别分布中取样-Sampling-from-a-Categorical-Distribution"><a href="#从类别分布中取样-Sampling-from-a-Categorical-Distribution" class="headerlink" title="从类别分布中取样 Sampling from a Categorical Distribution"></a>从类别分布中取样 Sampling from a Categorical Distribution</h3><p>有时候我们只关心类别的取样而非具体的数字， 例如抽卡时五星，四星，三星的概率分布。</p><p>datascience的<code>sample_proportions</code>支持这种取样方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sample_proportions(num, probability array)</span><br><span class="line"><span class="comment">#第一个参数填入样本数目</span></span><br><span class="line"><span class="comment">#第二个参数填入各类别的概率数组</span></span><br><span class="line"><span class="comment">#例如如果要统计原神抽卡概率分布, 取样10000次：</span></span><br><span class="line">sample = sample_proportions(<span class="number">10000</span>, [<span class="number">0.006</span>, <span class="number">0.051</span>, <span class="number">0.943</span>])</span><br><span class="line"><span class="comment">#这会返回一个np array，它的长度和传入的第二个参数相同，代表着每个类别在样本中所占比例</span></span><br></pre></td></tr></table></figure><hr><h2 id="Reference-and-remark"><a href="#Reference-and-remark" class="headerlink" title="Reference and remark"></a>Reference and remark</h2><p><a href="https://inferentialthinking.com/chapters/intro.html#">Data 8 Text book: Inferential Thinking chapter 9-10</a><br>教科书里也介绍了基础统计学知识，这在国内高中和大学高数都有涵盖，同样国外很多学校的基础数学课程，例如Discrete mathematics和Probability theory应该也有深入学习。</p>]]></content>
      
      
      <categories>
          
          <category> Data8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 中文 </tag>
            
            <tag> Data science(数据科学) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data 8 学习笔记(二)</title>
      <link href="/2025/06/29/Data8%20%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
      <url>/2025/06/29/Data8%20%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="Data-8-学习笔记-二"><a href="#Data-8-学习笔记-二" class="headerlink" title="Data 8 学习笔记(二)"></a>Data 8 学习笔记(二)</h1><h2 id="对Table的整列使用函数-Apply-function-to-a-column"><a href="#对Table的整列使用函数-Apply-function-to-a-column" class="headerlink" title="对Table的整列使用函数 Apply function to a column"></a>对Table的整列使用函数 Apply function to a column</h2><p>datascience库的Table支持对其中一列进行运算，具体的规则是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">square = Table.column(<span class="string">&quot;&quot;</span>)**<span class="number">2</span></span><br><span class="line">operation = Table.column(<span class="string">&quot;column1&quot;</span>) + Table.column(<span class="string">&quot;column2&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个本质上是从Table里拿一列并转换成np array，然后由np array来支持运算，np array支持的运算很多样：</p><ul><li>算术运算(* + &#x3D; &#x2F; % ** &#x2F;&#x2F;)</li><li>比较运算(逐元素) &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D;</li><li>np聚合函数<code>np.sum</code>, <code>np.mean</code>, <code>np.max</code>,<code> np.min</code>, <code>np.std</code>, <code>np.count_nonzero</code></li><li>np向量函数运算<code>np.sqrt</code>, <code>np.log</code>, <code>np.exp</code>, <code>np.sin</code>, <code>np.round</code></li><li>数组操作<code>.reshape()</code>,<code>.flatten()</code>, <code>.astype(type)</code>, <code>.copy()</code>, <code>.tolist()</code></li><li>索引切片</li></ul><p>当然，我们会发现这样并没有办法覆盖一些比较复杂的自定义函数运算，所以说datascience提供了一种更优雅的方式：<code>Table.apply()</code></p><blockquote><p><code>Table.apply(function, column_name)</code><br>第一个参数放入函数名，第二个参数放入作为函数参数的列的名称(如果函数需要的参数大于一个，可以把列名称放进一个list里面)：</p><pre><code class="language-python">def custom_func(x, y):return x + ynew_table = table.with_column(&#39;new_col&#39;, table.apply(custom_func, [&#39;col1&#39;, &#39;col2&#39;]))</code></pre><p>custome_func也可以用一个lambda函数来代替。</p></blockquote><hr><h2 id="数据分类和组合-Classifying-by-one-variable"><a href="#数据分类和组合-Classifying-by-one-variable" class="headerlink" title="数据分类和组合 Classifying by one variable"></a>数据分类和组合 Classifying by one variable</h2><h3 id="单数据"><a href="#单数据" class="headerlink" title="单数据"></a>单数据</h3><p>有时候我们需要根据单数据来分类，例如一个班级成绩表里可能有名字，成绩等和小组名称三列，我们希望把优秀成绩的和其他成绩的同学分类组合。<br>datascience里的<code>Table.group()</code>可以支持这一操作。向里面传入需要分类的列名称就可以得到每个类别的频数。</p><blockquote><p><code>Table.group(&quot;成绩等级&quot;)</code>:</p><table><thead><tr><th align="center">成绩等级</th><th align="center">人数</th></tr></thead><tbody><tr><td align="center">优秀</td><td align="center">15</td></tr><tr><td align="center">良</td><td align="center">25</td></tr><tr><td align="center">及格</td><td align="center">10</td></tr></tbody></table></blockquote><p>但是有些时候我们希望对每个类别的数据进行操作，这时候就可以传入第二个参数来表示我们需要进行的操作：</p><blockquote><p><code>Table.group(&quot;成绩等级&quot;, lambda y : y/50)</code>:</p><table><thead><tr><th align="center">成绩等级</th><th align="center">频率</th></tr></thead><tbody><tr><td align="center">优秀</td><td align="center">0.3</td></tr><tr><td align="center">良</td><td align="center">0.5</td></tr><tr><td align="center">及格</td><td align="center">0.2</td></tr><tr><td align="center">传入的参数可以是自定义函数，也可以是lambda函数或者其他内置函数</td><td align="center"></td></tr></tbody></table></blockquote><hr><h3 id="多数据"><a href="#多数据" class="headerlink" title="多数据"></a>多数据</h3><p>有时我们需要把不同列的数据综合作为分组依据，比如把成绩和小组名称作为变量分组，<code>group</code>同样支持多数据组合。</p><blockquote><p><code>Table.group([&quot;成绩等级&quot;, &quot;小组名称&quot;])</code></p><table><thead><tr><th align="center">成绩等级</th><th align="center">小组名称</th><th align="center">人数</th></tr></thead><tbody><tr><td align="center">优秀</td><td align="center">第一组</td><td align="center">5</td></tr><tr><td align="center">优秀</td><td align="center">第二组</td><td align="center">8</td></tr><tr><td align="center">优秀</td><td align="center">第三组</td><td align="center">2</td></tr><tr><td align="center">良</td><td align="center">第一组</td><td align="center">10</td></tr><tr><td align="center">良</td><td align="center">第二组</td><td align="center">9</td></tr><tr><td align="center">良</td><td align="center">第三组</td><td align="center">6</td></tr><tr><td align="center">及格</td><td align="center">第二组</td><td align="center">7</td></tr><tr><td align="center">及格</td><td align="center">第二组</td><td align="center">3</td></tr><tr><td align="center">只需要把分组的列名称放进一个list里作为第一个参数即可。</td><td align="center"></td><td align="center"></td></tr></tbody></table></blockquote><hr><h3 id="数据透视表-Pivot-table"><a href="#数据透视表-Pivot-table" class="headerlink" title="数据透视表 Pivot table"></a>数据透视表 Pivot table</h3><p><code>pivot</code>函数可以帮我们更好地可视化双变量的数据：</p><blockquote><p><code>Table.pivot(&quot;成绩等级&quot;, &quot;小组名称&quot;)</code></p><table><thead><tr><th align="center">成绩等级</th><th align="center">第一组</th><th align="center">第二组</th><th align="center">第三组</th></tr></thead><tbody><tr><td align="center">优秀</td><td align="center">5</td><td align="center">8</td><td align="center">2</td></tr><tr><td align="center">良</td><td align="center">10</td><td align="center">9</td><td align="center">6</td></tr><tr><td align="center">及格</td><td align="center">7</td><td align="center">3</td><td align="center">0</td></tr></tbody></table><p>只需要在前两个参数填入作为变量的两列名称，<code>pivot</code>便会自动统计频数并放入新的Table</p><p>特别的，<code>pivot</code>函数还有两个参数，<code>values</code>和<code>collect</code></p><ul><li><code>values=</code>后面填入需要统计的列名称，默认为null，也就是统计频数</li><li><code>collect=</code>后面填入需要对数据进行的操作，必须是np array支持的操作，例如np.sum, np.mean</li></ul><p>于是我们可以求每个组的各个成绩等级的分数的平均数：</p><p><code>Table.pivot(&quot;成绩等级&quot;, &quot;小组名称&quot;, values=&quot;分数&quot;, collect=np.mean)</code></p><table><thead><tr><th align="center">成绩等级</th><th align="center">第一组</th><th align="center">第二组</th><th align="center">第三组</th></tr></thead><tbody><tr><td align="center">优秀</td><td align="center">91</td><td align="center">85</td><td align="center">88</td></tr><tr><td align="center">良</td><td align="center">75</td><td align="center">77</td><td align="center">72</td></tr><tr><td align="center">及格</td><td align="center">0</td><td align="center">65</td><td align="center">66</td></tr></tbody></table></blockquote><hr><h3 id="把不同的表格合并起来-Joining-tables-by-columns"><a href="#把不同的表格合并起来-Joining-tables-by-columns" class="headerlink" title="把不同的表格合并起来 Joining tables by columns"></a>把不同的表格合并起来 Joining tables by columns</h3><p>有时对于两个表格，我们希望把同时存在于两个表格的数据放到一个表格里，这时候我们可以使用<code>join</code>函数。</p><p>基础语法是<code>table1.join(table1_column_for_joining, table2, table2_column_for_joining)</code>，datascience会自动提取同时存在于两个表格的元素并放到一个新的表格里面。</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://inferentialthinking.com/chapters/intro.html#">Data 8 Text book: Inferential Thinking chapter 8</a></p>]]></content>
      
      
      <categories>
          
          <category> Data8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 中文 </tag>
            
            <tag> Data science(数据科学) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data 8 学习笔记(一)</title>
      <link href="/2025/06/26/Data8%20%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
      <url>/2025/06/26/Data8%20%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="Data-8-学习笔记-一"><a href="#Data-8-学习笔记-一" class="headerlink" title="Data 8 学习笔记(一)"></a>Data 8 学习笔记(一)</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>DATA 8 是加州大学伯克利分校的数据科学基础课程，使用的编程语言为python。<br>课程资源:  </p><ul><li><a href="https://www.data8.org/">课程官网</a>  <blockquote><p>包含了课程视频，课上ppt，但是作业需要UCB的账号。<br>视频在Youtube可以找到，目前最新的是2022Spring(最新的人家不可能让你免费看嘛)</p></blockquote></li><li><a href="https://github.com/data-8">Github 课程作业</a>  <blockquote><p>包含课堂同步Jupiter notebook还有lab, hw, project以及最重量级的textbook。最新的是2025Spring(太良心了)。</p></blockquote></li></ul><p>具体的配置很简单，主要是使用numpy， panda, matplotlib, 还有UCB自己的datascience这几个python库。  </p><hr><h2 id="datascience-library"><a href="#datascience-library" class="headerlink" title="datascience library"></a>datascience library</h2><p>安装(在terminal, cmd):</p><blockquote><p>npm install datascience</p></blockquote><p>这个库属于UCB为了初学者专门创建的preliminary tool，它主要操作的数据类型是库里定义的Table。就如同它的名字一样，Table就是个表格，每一列都是一个np array(大概就是访问速度更快储存空间更小的array)，datascience库为它提供了包括可视化在内的基础操作。 </p><p>别忘了import：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> datascience <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> panda <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><hr><h2 id="对Table的基础操作"><a href="#对Table的基础操作" class="headerlink" title="对Table的基础操作"></a>对Table的基础操作</h2><p><em>Tip: 课程有一部分时间教了python的基本语法，函数，传参还有使用函数等等，这里不做介绍了。对于不熟悉的函数可以参考 <a href="https://www.data8.org/datascience/index.html">datascience 官方文档 </a>, 或者使用<code>help(function)</code></em></p><hr><h3 id="make-array"><a href="#make-array" class="headerlink" title="make_array()"></a>make_array()</h3><p>datasicence.util.make_array(), 把传入的每个数据合并到一个np array里面，传入的数据类型必须相同。返回一个np array。<br>对于np array可以使用numpy库的各种函数，比较常用的有：</p><ul><li><code>np.sort()</code> 排序</li><li><code>np.diff()</code> 取相邻元素求差值</li><li><code>np.sum()</code> 求和</li><li><code>np.prod()</code> 求乘积</li><li><code>np.round( ,digit)</code> 取digit位数，默认取整数</li></ul><p>用<code>np.arrange(start, end, step)</code>, <code>np.linspace(start, end, num)</code> 和 <code>np.array(list,tuple,etc)</code>也能创造np array。</p><p>需要选取一个np array里的数据可以使用<code>.item(index)</code>，index遵循python列表的索引规则(正序从0开始，倒序从-1开始)。</p><hr><h3 id="Table"><a href="#Table" class="headerlink" title="Table()"></a>Table()</h3><p>使用<code>Table()  </code>函数会创造一个新的空Table数据，其中不含有任何行或列元素。<br>该函数通常搭配<code>.with_columns()</code>函数使用。</p><blockquote><p><code>Table.with_columns(column_name:str, column_data: np_array)</code><br>该函数传入一个字符串作为列名称，以及一个np array作为列数据<br>eg:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = Table().with_columns(<span class="string">&quot;name&quot;</span>, np.array((<span class="string">&quot;Penny&quot;</span>, <span class="string">&quot;Brian&quot;</span>)))</span><br><span class="line">a.show()</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">name</th></tr></thead><tbody><tr><td align="center">Penny</td></tr><tr><td align="center">Brian</td></tr></tbody></table></blockquote><ul><li>使用 <code>Table.drop(column_name:str, ...)</code> 可以从Table里删除列(传入的列名称不存在的话报错)  </li><li>使用<code>Table.num_rows</code> 和 <code>Table.num_columns</code>可以获取Table里的行和列的数量。  </li><li>使用 <code>Table.labels</code> 获取Table里所以的列的名称, 使用<code>Table.relabeled(old_label, new_label)</code>可以更换列名称。</li><li>使用<code>Table.column(column_label)</code>会返回带有这个列名称的列，返回类型是np array。</li><li>使用<code>Table.select()</code>可以返回多个目标列组成的Table， 该函数可以传入索引也可以传入列名称。</li></ul><hr><h3 id="Table-sort"><a href="#Table-sort" class="headerlink" title="Table.sort()"></a>Table.sort()</h3><p>datascience也支持根据某一列来排序Table。  </p><blockquote><p><code>Table.sort()</code>传入列名称，datascience库会根据该列的数据进行排序，并返回一个新列表。  </p><p> <em>Tip: <code>Table.sort(str, descending = False)</code>默认升序排列，如果想要降序排列可以把descending属性改成True。</em></p></blockquote><hr><h3 id="Table-take"><a href="#Table-take" class="headerlink" title="Table.take()"></a>Table.take()</h3><p>之前说的<code>.select()</code> 还有 <code>.column()</code>函数都是选取列的，datascience也是支持选取特殊行的。</p><blockquote><p><code>Table.take(index,...)</code> 可以选取表格的index行并返回新的Table, index可以是collection，例如:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Table.take(np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>这样就会选取Table里从第一行到第10行，每隔一行的目标行，也就是会返回第1，3，5，7，9行组成的新Table。</p></blockquote><p>虽然这样根据行数选取行很有用，但是在有规律地选取行的时候限制很大。</p><hr><h3 id="Table-where"><a href="#Table-where" class="headerlink" title="Table.where()"></a>Table.where()</h3><p>用<code>where</code>函数我们可以有条件地筛选需要的行。</p><blockquote><p><code>Table.where(column_name: str, condition)</code><br>我们传入需要筛选的列数据地列名称，以及<em>条件</em>。</p><blockquote><p>对于条件参数，datascience也创造了新的类，<code>are</code>。通过<code>are.below()</code>,<code>are.between()</code>等函数，我们可以筛选符合一定数学条件地数据。<br>但是我个人推荐使用python内置地匿名函数<code>lambda</code>。例如<code>are.below()</code>就可以使用<code>lambda y : y &lt; x</code>来代替。</p></blockquote></blockquote><hr><p>通过上述的操作，我们可以把数据汇总到我们需要的Table里面。为了获取需要的Table，我们很可能要对数据进行很多步的操作，在此过程中必须格外注意<strong>哪些函数是直接修改原表格的，而哪些是会返回新的表格的</strong>，否则很有可能导致我们的操作不被保存在具体变量里。<br>想要熟悉这些操作的话可以试一下DATA 8 课程配套的project。</p><hr><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>面对汇总成Table的大量数据，为了方便我们分析，我们往往需要把数据转变成可视化的图。datascience和matplotlib都有能够将数据可视化的强大能力。</p><hr><h3 id="散点图-Scatter-plots"><a href="#散点图-Scatter-plots" class="headerlink" title="散点图 Scatter plots"></a>散点图 Scatter plots</h3><p>datascience库提供了极其简单的创造散点图的方法——<code>Table.scatter()</code>.</p><blockquote><p>给定一个已经汇总好的Table,我们可以往scatter函数里传入我们想要放入散点图的x,y轴的列名称,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Table.scatter(x_column_name: <span class="built_in">str</span>, y_column_new: <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p><em>Tip: 如果我们使用matplotlib来画散点图的话可能会更复杂点:</em>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.scatter(table.column(), table.column(), label=<span class="string">&quot;Points&quot;</span>)</span><br><span class="line"><span class="comment">#重要的是传入两个np array作为x,y轴</span></span><br><span class="line">plt.title(<span class="string">&quot;&quot;</span>) <span class="comment">#图的标题</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;&quot;</span>) <span class="comment">#x轴的标签</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;&quot;</span>) <span class="comment">#y轴的标签</span></span><br></pre></td></tr></table></figure></blockquote><hr><h3 id="折线图-Line-plots"><a href="#折线图-Line-plots" class="headerlink" title="折线图 Line plots"></a>折线图 Line plots</h3><p>折线图和散点图的语法完全一样,但是是使用<code>Table.plot()</code>函数。</p><blockquote><p>传入x,y轴的列数据列名称即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Table.plot(x_column_name: <span class="built_in">str</span>, y_column_new: <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>如果使用matplotlib的话也很简单:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, label=<span class="string">&quot;Line&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><hr><h3 id="条形图-Bar-chart"><a href="#条形图-Bar-chart" class="headerlink" title="条形图 Bar chart"></a>条形图 Bar chart</h3><p>datascience支持画横向纵向的条形图:</p><blockquote><p>使用<code>Table.bar(category, value)</code>画纵向的条形图,其中第一个参数是分组,第二个是数值(也就是说每个数据的高是第二个参数, 而每个数据的分组(x轴)是第一个参数)。</p><p>使用<code>Table.barh()</code>画横向的条形图,参数顺序一致,不过每个数据的名称显示在y轴而已。</p><p><em>Tip: 使用matplotlib画条形图的语法完全相同，但是函数的对象不再是Table而是plt <code>plt.bar()</code>, <code>plt.barh()</code></em></p></blockquote><hr><h3 id="直方图-Histogram"><a href="#直方图-Histogram" class="headerlink" title="直方图 Histogram"></a>直方图 Histogram</h3><p>在画直方图之前我们必须先了解<code>binning</code>(分箱)。  </p><blockquote><p><code>bins</code> 箱：指连续的区间 [a,b) 分箱时他们不一定是相等的区间。</p></blockquote><p>直方图展示的是数据的分布而非数据的值:</p><blockquote><p><code>area</code> 每个箱的高和箱的长度相乘可得这个箱的面积, 每个箱的面积的和为1。<br><code>height</code> 每个箱的高为: $$高(密度) &#x3D; 频率&#x2F;宽度 &#x3D; (频数&#x2F;总数)&#x2F;宽度$$</p></blockquote><p>那怎么画直方图捏:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当你分箱完毕后记得把bins放到一个nparray里面，然后调用Table.hist()</span></span><br><span class="line">bins=np.arange(<span class="number">10</span>,<span class="number">50</span>,<span class="number">10</span>)</span><br><span class="line">a = Table().with_columns(<span class="string">&quot;count&quot;</span>, np.array((<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>)))</span><br><span class="line">a.hist(<span class="string">&quot;count&quot;</span>, bins=bins)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使用.bin()来查看每个bin里面的频数</span></span><br><span class="line">a_counts = a.<span class="built_in">bin</span>(<span class="string">&quot;count&quot;</span>, bins=bins)</span><br></pre></td></tr></table></figure><p><em>bin_counts: 假设column是(10,20,20,30,30,40), bins是np.array((10,20,30,40)), 那么对该列使用.bins()的结果是：</em></p><table><thead><tr><th align="center">bin</th><th align="center">count</th></tr></thead><tbody><tr><td align="center">10</td><td align="center">1</td></tr><tr><td align="center">20</td><td align="center">2</td></tr><tr><td align="center">30</td><td align="center">2</td></tr><tr><td align="center">40</td><td align="center">1</td></tr></tbody></table><hr><h3 id="重叠图-Overlaid-graphs"><a href="#重叠图-Overlaid-graphs" class="headerlink" title="重叠图 Overlaid graphs"></a>重叠图 Overlaid graphs</h3><p>有时候我们需要把坐标和尺度相同的数据集放在同一个图表里，datascience库也能很轻松地完成这个任务。  </p><p>对于比较常用的散点图<code>scatter()</code>，条形图<code>bar</code>,<code>barh</code>,和折线图<code>plot</code>，调用方法都一样，结构类似于：<br><code>Table.method(column_label_of_common_axis, array_of_labels_of_variables_to_plot)</code></p><p>不过最常用的办法是用<code>select</code>函数从Table里先筛选出需要画图的列，然后在第一个参数里放入坐标列的名称即可，datascience库会自动把剩余列元素一同放在图里。</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://inferentialthinking.com/chapters/intro.html#">Data 8 Text book: Inferential Thinking chapter 1-7</a></p>]]></content>
      
      
      <categories>
          
          <category> Data8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 中文 </tag>
            
            <tag> Data science(数据科学) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Fundamentals</title>
      <link href="/2025/06/25/MDlearning/"/>
      <url>/2025/06/25/MDlearning/</url>
      
        <content type="html"><![CDATA[<h1 id="Learn-Markdown"><a href="#Learn-Markdown" class="headerlink" title="Learn Markdown"></a>Learn Markdown</h1><blockquote><p><em>Markdown is a lightweight markup language for creating formatted text using a plain-text editor.</em><br><em><div align="right">Wikipedia</div></em></p></blockquote><p>I have always wondered why in Github some repos have beautifully documented readme section. Therefore, I decided to learn to create .md files for my readmes and posts.</p><p>Markdown is widely used in various occasions, including Github readme.md, almost any post you see online and post in university forums, like ed.</p><hr><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>We must note that md supports raw HTML, so we can use any standard HTML labels and even inline <code>style</code> attribute in .md files. This really comes in handy if you already learned HTML.</p><h2 id="Headings"><a href="#Headings" class="headerlink" title="Headings"></a>Headings</h2><p>Markdown resembles HTML in many ways. First one being the expression of titles and headings.  </p><p>In HTML we have:</p><figure class="highlight xhtml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is an h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is an h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is an h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>This is an h4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>This is an h5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>This is an h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>showing six heading levels. In md we also have the same structure:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Title (h1)</span></span><br><span class="line"><span class="section">## Section (h2)</span></span><br><span class="line"><span class="section">### Subsection (h3)</span></span><br><span class="line"><span class="section">#### Details (h4)</span></span><br><span class="line"><span class="section">##### Small Heading (h5)</span></span><br><span class="line"><span class="section">###### Tiny Heading (h6)</span></span><br></pre></td></tr></table></figure><p>In addition, we can create horizontal lines with:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> * *</span><br><span class="line">_ _ _</span><br><span class="line"><span class="bullet">-</span> - -</span><br></pre></td></tr></table></figure><hr><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><p>Lists are often used in frontend developments, as in HTML.  </p><p>In md we create lists(ordered and unordered) with “*, -, +” and numbers.</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> List 1 (remember the indentation)</span><br><span class="line"><span class="bullet">+</span> List 2</span><br><span class="line"><span class="bullet">-</span> List 3</span><br><span class="line"><span class="bullet">1.</span> List 4 Item 1</span><br><span class="line"><span class="bullet">2.</span> List 4 Item 2</span><br></pre></td></tr></table></figure><p>And it also supports tick boxes with “[x]” (suprisingly the x means tick, lol):</p><ol><li><input checked="" disabled="" type="checkbox"> learned headings</li><li><input disabled="" type="checkbox"> learned lists?</li></ol><hr><h2 id="Break-line"><a href="#Break-line" class="headerlink" title="Break line"></a>Break line</h2><p>In HTML breaking a line simply needs a <code>&lt;br&gt;</code> label. But in md, it is a bit different.  </p><p>Breaking a line in md typically need two <code>enter</code> or two <code>space</code>.<br>Observe:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">First line</span><br><span class="line"></span><br><span class="line">Second line</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">First line  (two spaces)</span><br><span class="line">Second line</span><br></pre></td></tr></table></figure><p>Both will be recognised as two separate lines. </p><p>Instead, using one <code>enter</code> will be interpreted as one space.  </p><p>However, this is not always the case. As in lists, two <code>enter</code> will cause the second line to appear outside of the list item while two <code>space</code> will enable the second line to be inside the list item.</p><blockquote><ol><li>Break inside the</li></ol><pre><code>list item.</code></pre><ol start="2"><li>Break outside of the</li></ol><p>list item</p></blockquote><hr><h2 id="Code-blocks"><a href="#Code-blocks" class="headerlink" title="Code blocks"></a>Code blocks</h2><p>Code blocks can be created by including the codes in side three ` . </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><p>And inline code blocks uses one ` Instead. Like <code>print(&quot;Hello world&quot;)</code> .</p><p>Another important thing is that we uses <code>\</code> to prevent the character from acting upon its original purpose. Just like the ` above.</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Md enables reference using <code>&gt;</code>. It follows the same line breaking logic as in lists.  </p><p>In addition, we can treat the reference block as individual and put new reference or lists in it. The effect looks like:</p><blockquote><p>Reference</p><ol><li>Reference list</li><li>Reference list<blockquote><p>Inner reference</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Inner code block. Just like a Russian matryoshaka doll!&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote></li></ol></blockquote><hr><h2 id="Links-and-Images"><a href="#Links-and-Images" class="headerlink" title="Links and Images"></a>Links and Images</h2><p>In HTML when we need to show links we use something like:</p><p><code>&lt;a href=&quot;https://home.student.monash&quot;&gt;monash student portal&lt;/a&gt;</code><br><a href="https://home.student.monash">monash student portal</a></p><p>In md we can achieve the same objective using <code>[]</code> and <code>()</code>, where <code>[]</code> is used for link text and <code>()</code> is used for link address(url). </p><p>Observe:</p><p><code>[monash student portal](https://home.student.monash)</code>  </p><p>or  </p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">monash student portal</span>][<span class="symbol">a</span>]</span><br><span class="line">[<span class="symbol">a</span>]: <span class="link">https://home.student.monash</span></span><br></pre></td></tr></table></figure><p><a href="https://home.student.monash/">monash student portal</a></p><p>Same format applies to images. We only have to remember to put a <code>!</code> in front of everything.  </p><p>Observe:  </p><p><code>![starry night](https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/960px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg)</code>  </p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/960px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg" alt="starry night"></p><p>However, you cannot change the image’s size or other styles with md syntax, so I recommend using HTML for this part.  </p><p>Bonus: we can make the starry night image smaller in html.</p><div align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/960px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg" alt="Starry Night" style="max-width:50%;"></div><hr><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><p>In HTML we have <code>&lt;Table&gt;</code> label to create tables, and <code>&lt;tr&gt;</code> for each row, <code>&lt;th&gt;</code> for the header, and <code>&lt;td&gt;</code> for the data in the cell. </p><p>In md however, things are more intuitive with tables. We just draw the table with <code>|</code>.</p><p>For each row, we use <code>|</code> to separate each cell and type in the content between them:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| header 1 | header 2 | header 3 |</span><br><span class="line">|-|-|-|</span><br><span class="line">| cell 1 | cell 2 | cell 3 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>header 1</th><th>header 2</th><th>header 3</th></tr></thead><tbody><tr><td>cell 1</td><td>cell 2</td><td>cell 3</td></tr></tbody></table><p>But remember to put a row of <code>-</code> below the header, the interpreter uses this row to identify the table item. (the number of <code>-</code> doesn’t matter.)</p><p>On the other hand you can set the alignment of each cell with <code>:</code> in the special row. </p><ul><li><code>|:--|</code>: left align</li><li><code>|--:|</code>: right align</li><li><code>|:--:|</code>: center align</li></ul><p>The table items also support embedding other components like code blocks, lists, etc.</p><hr><h2 id="Customization-with-HTML"><a href="#Customization-with-HTML" class="headerlink" title="Customization with HTML"></a>Customization with HTML</h2><p>As we briefly mentioned before, .md file supports raw HTML syntax, which makes it very adaptable to <i style="color: cyan">customization</i>.</p><p>For example, using <code>&lt;u&gt;&lt;/u&gt;</code> tags to show <u>underscore</u>, using <code>&lt;i&gt;&lt;/i&gt;</code> to show <i>italic</i>, using <code>&lt;span style=&quot;&quot;&gt;&lt;/span&gt;</code> to customize <span style="font-family: Courier New">font</span>, etc.</p><p>You can even embed videos from Youtube or Bilibili with iframe label:</p><iframe width="560" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ?si=ckhgLwuzBRViAOgd" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>In md, we also support adding </p><ul><li><strong>bold font</strong> with <code>**bold**</code> or <code>__bold__</code>. </li><li><em>italic</em> with<code>*italic*</code> or <code>_italic_</code>.</li><li><del>strike-through</del> with <code>~~strike-through~~</code>.</li></ul><hr><h2 id="Formulas-and-symbols"><a href="#Formulas-and-symbols" class="headerlink" title="Formulas and symbols"></a>Formulas and symbols</h2><p>For those who desire using md for academic writing (I sincerely hope not), typing formulas and symbols are a very tricky part.<br>Thankfully, md supports math symbols for complex formulas, you only have to include them in <code>$$</code>(in blocks) or <code>$</code>(inline).</p><p>Obersve:<br>$$<br>E &#x3D; mc^2<br>$$<br>and $E &#x3D; mc^2$</p><p>Markdown and latex uses the same system for mathematical expressions, they can be found in </p><blockquote><p>English version: <a href="https://rpruim.github.io/s341/S19/from-class/MathinRmd.html">https://rpruim.github.io/s341/S19/from-class/MathinRmd.html</a><br>Chinese version: <a href="https://zhuanlan.zhihu.com/p/450465546">https://zhuanlan.zhihu.com/p/450465546</a><br><em><span style="color: cyan">Tips:</span> your interpreter should enable <a href="https://www.mathjax.org/">mathjax</a> to show formulas.</em></p></blockquote><p>Personally, if the expression is too complicated, I would rather embed images of the formula using <code>&lt;img&gt;</code> label.</p><hr><h2 id="Emoji-and-Icon"><a href="#Emoji-and-Icon" class="headerlink" title="Emoji and Icon"></a>Emoji and Icon</h2><p>Markdown supports emojis and icons. There are ways to insert them in .md files to make the document more interactive:  </p><ul><li><strong>✍️Copy and paste the desired icons.</strong><br>You can find almost all emojis in <a href="https://www.emojiall.com/">emojiall</a>, just copy and paste them to your files.  </li><li><strong>✍🏻Using Github style Emoji shortcodes.</strong><br>You can find the shortcodes in <a href="https://gist.github.com/rxaviers/7360908">this page</a>.</li><li><strong>✍🏾Using Unicode of emojis.</strong><br>You can find the unicode on <a href="https://www.unicode.org/emoji/charts/full-emoji-list.html">unicode official website</a>.</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 技术博客(tech blog) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog~</title>
      <link href="/2025/06/16/My-First-Post/"/>
      <url>/2025/06/16/My-First-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一个博客"><a href="#我的第一个博客" class="headerlink" title="我的第一个博客~"></a>我的第一个博客~</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
